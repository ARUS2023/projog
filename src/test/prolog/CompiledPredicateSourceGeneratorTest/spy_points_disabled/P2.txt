package org.projog.compiled_at_runtime;
import org.projog.core.term.*;
import org.projog.core.CutException;
import org.projog.core.KnowledgeBase;
import org.projog.core.KnowledgeBaseUtils;
import org.projog.core.Predicate;
import org.projog.core.PredicateKey;
// "testTailRecursiveRepeat"/1
public final class P2 extends org.projog.core.udp.compiler.CompiledTailRecursivePredicate{
private boolean initRule0(){
Variable v0=new Variable("N");
if(v0.unify(a0)){
return true;
}else return false;
}
private boolean initRule1(){
a0.backtrack();
Variable v1=new Variable("N");
if(v1.unify(a0)){
Term v2=v1.getTerm();
if(Double.compare(O.getNumeric(v2).getDouble(),1d)<=0)return false;
v3=new Variable("N1");
Term v4=v2.getTerm();
if(!v3.unify(A0.calculate(O.getNumeric(v4),INTEGER_1)))return false;
return true;
}else return false;
}
public boolean couldReevaluationSucceed(){return true;}
public final boolean[] isSingleResultIfArgumentImmutable(){return new boolean[]{false};}
protected final boolean matchFirstRule(){return initRule0();}
protected final boolean matchSecondRule(){if (initRule1()){
a0=v3.getTerm();
return true;}return false;}
protected final void backtrack(){
a0.backtrack();
}
protected final void logCall(){
}
protected final void logRedo(){
}
protected final void logExit(){
}
protected final void logFail(){
}
public P2 getPredicate(Term... args){
return getPredicate(args[0]);
}
public P2 getPredicate(Term i0) {
return new P2(i0);}
public boolean isRetryable(){return true;}
public P2(KnowledgeBase kb){
O=KnowledgeBaseUtils.getArithmeticOperators(kb);
A0=(org.projog.core.function.math.Subtract)O.getArithmeticOperator(new PredicateKey("-",2));
a0=null;
}
private P2(Term i0) {
a0=i0.getTerm();
}
public void setKnowledgeBase(KnowledgeBase k){}
private static org.projog.core.ArithmeticOperators O;
private static org.projog.core.function.math.Subtract A0;
private Variable v3;
private static final IntegerNumber INTEGER_1=new IntegerNumber(1L);
private  Term a0;
}
