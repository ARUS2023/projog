package org.projog.compiled_at_runtime;
import org.projog.core.term.*;
import org.projog.core.CutException;
import org.projog.core.KnowledgeBase;
import org.projog.core.KnowledgeBaseUtils;
import org.projog.core.Predicate;
import org.projog.core.PredicateKey;
// "testCutManyRules"/3
public final class P10 implements org.projog.core.udp.compiler.CompiledPredicate{
private boolean initRule0(){
Variable v0=new Variable("X");
Variable v1=new Variable("Y");
Variable v2=new Variable("RuleNo");
if(v0.unify(a0)&&v1.unify(a1)&&v2.unify(a2)){
Term v3=v2.getTerm();
if(!F0.evaluate(v3,INTEGER_1))return false;
Term v4=v0.getTerm();
if(NumericTermComparator.NUMERIC_TERM_COMPARATOR.compare(O.getNumeric(v4),INTEGER_5)<=0)return false;
Term v5=v1.getTerm();
if(NumericTermComparator.NUMERIC_TERM_COMPARATOR.compare(O.getNumeric(v5),INTEGER_7)>=0){c=5;return false;}
j=0;
return true;
}else return false;
}
private boolean retryRule0(){
while(true){
switch(j){
case 0:
if(p0==null){
p0=F1.getPredicate(INTEGER_3);
if(!p0.evaluate()){
c=5;
return false;
}}else{
b0_4();
if(!p0.couldReevaluationSucceed()||!p0.evaluate()){
c=5;
return false;
}}
}
return true;
}
}
private void b0_4(){
}
private boolean initRule1(){
a0.backtrack();
a1.backtrack();
a2.backtrack();
Variable v6=new Variable("X");
Variable v7=new Variable("Y");
Variable v8=new Variable("RuleNo");
if(v6.unify(a0)&&v7.unify(a1)&&v8.unify(a2)){
Term v9=v8.getTerm();
if(!F0.evaluate(v9,INTEGER_2))return false;
Term v10=v6.getTerm();
if(NumericTermComparator.NUMERIC_TERM_COMPARATOR.compare(O.getNumeric(v10),INTEGER_3)>=0)return false;
c=5;
Term v11=v7.getTerm();
if(NumericTermComparator.NUMERIC_TERM_COMPARATOR.compare(O.getNumeric(v11),INTEGER_7)>=0){c=5;return false;}
if(!F1.getPredicate(INTEGER_7).evaluate()){c=5;return false;}
c=5;
if(!F1.getPredicate(INTEGER_3).evaluate()){c=5;return false;}
c=5;
return true;
}else return false;
}
private boolean initRule2(){
a0.backtrack();
a1.backtrack();
a2.backtrack();
Variable v12=new Variable("X");
Variable v13=new Variable("Y");
Variable v14=new Variable("RuleNo");
if(v12.unify(a0)&&v13.unify(a1)&&v14.unify(a2)){
Term v15=v14.getTerm();
if(!F0.evaluate(v15,INTEGER_3))return false;
return true;
}else return false;
}
private boolean initRule3(){
a0.backtrack();
a1.backtrack();
a2.backtrack();
Variable v16=new Variable("X");
Variable v17=new Variable("Y");
Variable v18=new Variable("RuleNo");
if(v16.unify(a0)&&v17.unify(a1)&&v18.unify(a2)){
Term v19=v18.getTerm();
if(!F0.evaluate(v19,INTEGER_4))return false;
Term v20=v16.getTerm();
if(NumericTermComparator.NUMERIC_TERM_COMPARATOR.compare(O.getNumeric(v20),INTEGER_3)<=0)return false;
c=5;
Term v21=v17.getTerm();
if(NumericTermComparator.NUMERIC_TERM_COMPARATOR.compare(O.getNumeric(v21),INTEGER_7)>=0){c=5;return false;}
if(!F1.getPredicate(INTEGER_3).evaluate()){c=5;return false;}
c=5;
return true;
}else return false;
}
private boolean initRule4(){
a0.backtrack();
a1.backtrack();
a2.backtrack();
Variable v22=new Variable("X");
Variable v23=new Variable("Y");
Variable v24=new Variable("RuleNo");
if(v22.unify(a0)&&v23.unify(a1)&&v24.unify(a2)){
Term v25=v24.getTerm();
if(!F0.evaluate(v25,INTEGER_5))return false;
j=0;
return true;
}else return false;
}
private boolean retryRule4(){
while(true){
switch(j){
case 0:
if(p1==null){
p1=F1.getPredicate(INTEGER_2);
if(!p1.evaluate()){
return false;
}}else{
b4_1();
if(!p1.couldReevaluationSucceed()||!p1.evaluate()){
return false;
}}
}
return true;
}
}
private void b4_1(){
}
public boolean evaluate(){
if(d){
if(p0==null){
s.logCall(this,new Term[]{a0,a1,a2});
}else{
s.logRedo(this,new Term[]{a0,a1,a2});
}}
try{
switch(c){
case 0:
if(p0==null){
if(initRule0()&&retryRule0())
{
if(d){s.logExit(this,new Term[]{a0,a1,a2},1);}
return true;}
}else if(retryRule0()){
{
if(d){s.logExit(this,new Term[]{a0,a1,a2},1);}
return true;}
}if(c==5)break;
c=1;
case 1:
c=2;
if(initRule1())
{
if(d){s.logExit(this,new Term[]{a0,a1,a2},2);}
return true;}
if(c==5)break;
case 2:
c=3;
if(initRule2())
{
if(d){s.logExit(this,new Term[]{a0,a1,a2},3);}
return true;}
case 3:
c=4;
if(initRule3())
{
if(d){s.logExit(this,new Term[]{a0,a1,a2},4);}
return true;}
if(c==5)break;
case 4:
if(p1==null){
if(initRule4()&&retryRule4())
{
if(d){s.logExit(this,new Term[]{a0,a1,a2},5);}
return true;}
}else if(retryRule4()){
{
if(d){s.logExit(this,new Term[]{a0,a1,a2},5);}
return true;}
}c=5;
}}catch(CutException e){c=5;}
if(d){s.logFail(this,new Term[]{a0,a1,a2});}
return false;}
public boolean couldReevaluationSucceed(){
if (c==4)return(p1==null||p1.couldReevaluationSucceed());
return c!=5;
}
public P10 getPredicate(Term... args){
return getPredicate(args[0],args[1],args[2]);
}
public P10 getPredicate(Term i0,Term i1,Term i2) {
return new P10(i0,i1,i2);}
public boolean isRetryable(){return true;}
public P10(KnowledgeBase kb){
F0=(org.projog.core.function.compare.Equal)kb.getPredicateFactory(new PredicateKey("=",2));
F1=(org.projog.core.function.flow.RepeatSetAmount)kb.getPredicateFactory(new PredicateKey("repeat",1));
O=KnowledgeBaseUtils.getArithmeticOperators(kb);
s=KnowledgeBaseUtils.getSpyPoints(kb).getSpyPoint(new PredicateKey("testCutManyRules",3));
d=false;
a0=null;
a1=null;
a2=null;
}
private P10(Term i0,Term i1,Term i2) {
a0=i0.getTerm();
a1=i1.getTerm();
a2=i2.getTerm();
d=s.isEnabled();
}
public void setKnowledgeBase(KnowledgeBase k){}
private static org.projog.core.function.compare.Equal F0;
private static org.projog.core.function.flow.RepeatSetAmount F1;
private static org.projog.core.ArithmeticOperators O;
private Predicate p0;
private Predicate p1;
private static final IntegerNumber INTEGER_1=new IntegerNumber(1L);
private static final IntegerNumber INTEGER_5=new IntegerNumber(5L);
private static final IntegerNumber INTEGER_7=new IntegerNumber(7L);
private static final IntegerNumber INTEGER_3=new IntegerNumber(3L);
private static final IntegerNumber INTEGER_2=new IntegerNumber(2L);
private static final IntegerNumber INTEGER_4=new IntegerNumber(4L);
private final Term a0;
private final Term a1;
private final Term a2;
private int j;
private int c;
private static org.projog.core.SpyPoints.SpyPoint s;
private final boolean d;
}
