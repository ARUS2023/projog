package org.projog.compiled_at_runtime;
import org.projog.core.term.*;
import org.projog.core.CutException;
import org.projog.core.KnowledgeBase;
import org.projog.core.KnowledgeBaseUtils;
import org.projog.core.Predicate;
import org.projog.core.PredicateKey;
// "testWrite"/1
public final class P5 implements org.projog.core.udp.compiler.CompiledPredicate{
private boolean initRule0(){
Variable v0=new Variable("X");
if(v0.unify(a0)){
F0.writeString("hel");
F1.writeString("lo, ");
Term v1=v0.getTerm();
F1.evaluate(v1);
F1.writeString("!");
return true;
}else return false;
}
public boolean evaluate(){
try{
switch(c){
case 0:
c=1;
if(initRule0())
{
return true;}
}}catch(CutException e){c=1;}
return false;}
public boolean couldReevaluationSucceed(){
return false;
}
public P5 getPredicate(Term... args){
return getPredicate(args[0]);
}
public P5 getPredicate(Term i0) {
return new P5(i0);}
public boolean isRetryable(){return false;}
public P5(KnowledgeBase kb){
F0=(org.projog.core.function.io.Write)kb.getPredicateFactory(new PredicateKey("writeln",1));
F1=(org.projog.core.function.io.Write)kb.getPredicateFactory(new PredicateKey("write",1));
O=KnowledgeBaseUtils.getArithmeticOperators(kb);
a0=null;
}
private P5(Term i0) {
a0=i0.getTerm();
}
public void setKnowledgeBase(KnowledgeBase k){}
private static org.projog.core.function.io.Write F0;
private static org.projog.core.function.io.Write F1;
private static org.projog.core.ArithmeticOperators O;
private final Term a0;
private int c;
}
